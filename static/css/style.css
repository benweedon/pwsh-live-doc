:root {
    --stream-view-border: 2px solid black;
}

body {
    font-size: large;
    max-width: 100%;

    margin-left: 1rem;
    margin-right: 1rem;
}

#grid-container {
    display: grid;

    grid-template-columns: fit-content(15em) minmax(0, 1fr);
    grid-template-rows: max-content max-content 1fr;
    grid-template-areas:
        "header header"
        "versions-tested main"
        "page-nav main";

    column-gap: 3rem;
}

/* Try to check if the screen width is less than the (very approximate) sum of
 * all element max widths and paddings */
@media only screen and (max-width: calc(1em + 15em + 3em + 40em + 1em)) {
    #grid-container {
        grid-template-columns: 100%;
        grid-template-rows: auto;
        grid-template-areas:
            "header"
            "main"
            "versions-tested"
            "page-nav";
    }
}

header {
    grid-area: header;
    justify-self: center;
    text-align: center;
}

header > h1 > a {
    color: black;
    text-decoration: none;
}

#versions-tested {
    grid-area: versions-tested;
}

.tested-version {
    margin: 4px;
}

main {
    grid-area: main;
    justify-self: start;
    max-width: 100%;
}

.content-text {
    max-width: 40em;
}

.code-view {
    overflow: auto;
}

.code-view ol {
    list-style-type: none;
    counter-reset: line-number;
    width: min-content;

    margin: 0;
    padding: 0;
}

.code-view li {
    line-height: 1.5;
}

.line-grid {
    display: grid;
    grid-template-columns: 1em 1fr;
}


.code-view pre, .code-view code {
    margin: 0;
    padding: 0;
}

.code-view code {
    padding-left: 0.5em;
    padding-right: 0.5em;
    /* Override the highlightjs styling. */
    overflow: visible;
}

.code-view summary {
    list-style-type: none;
}

.code-view summary > div {
    width: 0.6em;
    height: 0.6em;
    place-self: center;

    background: url('/img/expand.svg');
    background-size: 100%;

    cursor: pointer;
}

.code-view details[open] summary > div {
    background: url('/img/collapse.svg');
    background-size: 100%;
}

.code-view .line-number::before {
    counter-increment: line-number;
    content: counter(line-number);

    display: inline-block;
    width: 2em;
    box-sizing: border-box;

    padding-right: 0.6em;
    margin-right: 0.6em;
    border-right: 1px solid black;

    text-align: end;
}

.raw-output-view {
    padding-top: 1em;
    padding-bottom: 1em;
}

.raw-output-view summary {
    font-size: 1.2em;
}

.stream-view {
    padding: 0.7em;
}

.stream-view-scroll {
    overflow: auto;
}

/* This element is flex container for the stream outputs. It needs to be a
 * child of the scrollable element so that all flex children will have the full
 * width of the scrolled content. Without this, output text backgrounds
 * wouldn't all reach to the end of the view.
 *
 * `width` is `min-content` so that its width extends further than the
 * unscrolled parent. `min-width` is `100%` so that if the content is smaller
 * than the width of the parent, we still expand to fill the parent. */
.stream-view-scroll > div {
    display: flex;
    flex-wrap: wrap;

    width: min-content;
    min-width: 100%;

    box-sizing: border-box;
    border-bottom: var(--stream-view-border);
    border-right: var(--stream-view-border);
}

.stream-view-flex-item {
    flex: 1;

    box-sizing: border-box;
    border-top: var(--stream-view-border);
    border-left: var(--stream-view-border);

    padding: 0.7em;
}

.stream-view-flex-item aside {
    font-style: italic;
    padding-top: 0.2em;
    padding-bottom: 0.2em;
}

.output-view-heading {
    padding-bottom: 0.2em;
}

.stream-view > .output-view-heading {
    font-size: 1.4em;
}

.stream-view-flex-item > .output-view-heading {
    font-size: 1.2em;
}

.output-text {
    background: #f0f0f0;
    padding: 0.5em;
    margin: 0;
}

#page-nav {
    grid-area: page-nav;
}

#page-nav > ol {
    list-style: none;
    padding-left: 0;
}

#page-nav ol > li > details > ol {
    list-style: none;
}

#page-nav ol > li > details > ol > li {
    padding-top: 0.5em;
}

#page-nav ol > li > details > ol > li a {
    color: rgb(0, 0, 130);
}
